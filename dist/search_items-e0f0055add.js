searchNodes=[{"ref":"Steve.html","title":"Steve","type":"module","doc":""},{"ref":"Steve.html#enqueue/2","title":"Steve.enqueue/2","type":"function","doc":"Schedules a job to be performed at a given time."},{"ref":"Steve.Job.html","title":"Steve.Job","type":"module","doc":""},{"ref":"Steve.Job.html#create/1","title":"Steve.Job.create/1","type":"function","doc":"Creates a t/0 structure with the given params. This function also injects additional required fields."},{"ref":"Steve.Job.html#t:t/0","title":"Steve.Job.t/0","type":"type","doc":""},{"ref":"Steve.Queue.html","title":"Steve.Queue","type":"module","doc":""},{"ref":"Steve.Queue.html#create/1","title":"Steve.Queue.create/1","type":"function","doc":"Subscribes to a queue with the given configuration."},{"ref":"Steve.Queue.html#t:options/0","title":"Steve.Queue.options/0","type":"type","doc":""},{"ref":"Steve.Storage.html","title":"Steve.Storage","type":"behaviour","doc":"Defines a behaviour for storage adapters to implement."},{"ref":"Steve.Storage.html#c:ack!/1","title":"Steve.Storage.ack!/1","type":"callback","doc":"Called after a job has been performed successfully."},{"ref":"Steve.Storage.html#c:dequeue/2","title":"Steve.Storage.dequeue/2","type":"callback","doc":"Called to dequeue a specific amount of jobs."},{"ref":"Steve.Storage.html#c:enqueue/2","title":"Steve.Storage.enqueue/2","type":"callback","doc":"Called to enqueue a given job to be performed at a specific time."},{"ref":"Steve.Storage.html#c:recover!/1","title":"Steve.Storage.recover!/1","type":"callback","doc":"Called upon start to hopefully recover orphaned jobs."},{"ref":"Steve.Storage.html#c:retry!/1","title":"Steve.Storage.retry!/1","type":"callback","doc":"Called after an error is encountered when performing a job."},{"ref":"Steve.Storage.Ecto.html","title":"Steve.Storage.Ecto","type":"module","doc":"A storage adapter that uses Ecto to interact with a database. Configuration The application must be configured as shown below. config :steve, [ storage: Steve.Storage.Ecto, repository: Example.Repo ] Where Example.Repo should be a valid Ecto.Repo instance. Migrations One must also define the following migration within their application. defmodule Example.Repo.Migrations.Steve do use Ecto.Migration defdelegate change, to: Steve.Storage.Ecto.Migration end"},{"ref":"Steve.Storage.Ecto.html#ack!/1","title":"Steve.Storage.Ecto.ack!/1","type":"function","doc":"Called after a job has been performed successfully. Callback implementation for Steve.Storage.ack!/1."},{"ref":"Steve.Storage.Ecto.html#dequeue/2","title":"Steve.Storage.Ecto.dequeue/2","type":"function","doc":"Called to dequeue a specific amount of jobs. Callback implementation for Steve.Storage.dequeue/2."},{"ref":"Steve.Storage.Ecto.html#enqueue/2","title":"Steve.Storage.Ecto.enqueue/2","type":"function","doc":"Called to enqueue a given job to be performed at a specific time. Callback implementation for Steve.Storage.enqueue/2."},{"ref":"Steve.Storage.Ecto.html#recover!/1","title":"Steve.Storage.Ecto.recover!/1","type":"function","doc":"Called upon start to hopefully recover orphaned jobs. Callback implementation for Steve.Storage.recover!/1."},{"ref":"Steve.Storage.Ecto.html#retry!/1","title":"Steve.Storage.Ecto.retry!/1","type":"function","doc":"Called after an error is encountered when performing a job. Callback implementation for Steve.Storage.retry!/1."},{"ref":"Steve.Storage.Ecto.Migration.html","title":"Steve.Storage.Ecto.Migration","type":"module","doc":"Refer to Steve.Storage.Ecto for more information."},{"ref":"Steve.Worker.html","title":"Steve.Worker","type":"behaviour","doc":"Defines a behaviour for workers to implement. Be sure to use this module for defaults to be injected."},{"ref":"Steve.Worker.html#c:backoff/1","title":"Steve.Worker.backoff/1","type":"callback","doc":"Called to determine a retry time offset in seconds. Check the source code for the default implementation."},{"ref":"Steve.Worker.html#c:perform/1","title":"Steve.Worker.perform/1","type":"callback","doc":"Called when a job is to be preformed."},{"ref":"overview.html","title":"Overview","type":"extras","doc":"Overview Steve is an Elixir background job processor inspired by verk and exq. Structure Steve is planned out to be simple and intuitive both on its internals and when it comes to user interaction. As such, its structure is rather straightforward and compact, schemed across multiple modules as follows. Job - defines useful helper functions used when creating job structures. Queue - serves as the brain for each of the queues the library is subscribed to. Storage - different adapters to pick from to be used for persisting the jobs. Worker - defines a behaviour to be implemented by all the job workers. Usage Currently there is no package published on Hex and instead one must include Steve as follows. defp deps do [{:steve, git: &quot;https://github.com/satom99/steve.git&quot;}] end Once installed, Steve must be configured according to the desired storage adapter. One may find more information on this on the adapter&#39;s documentation page. Once these steps are completed, one may configure their application to subscribe to the desired queues. config :steve, :queues, [ [name: :emails, size: 5], [name: :webhooks, size: 25] ] Do note as well that these keyword lists are the options that the function Steve.Queue.create/1 takes in."}]